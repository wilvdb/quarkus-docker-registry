# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java image build

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

  workflow_call:


  workflow_dispatch:
    inputs:
      WITH_NATIVE:
        description: 'Trigger native build'
        type: boolean
        default: false
env:
#  TRIVY_SEVERITY: 'CRITICAL,HIGH'
  TRIVY_SEVERITY: 'CRITICAL'

jobs:
  maven-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - id: maven-options
      uses: ./.github/actions/maven-options
      with:
        native: false
    - name: Build with Maven
      env:
        MVN_OPTIONS: ${{ steps.maven-options.outputs.mvn-options }}
      #      run: mvn -B package -DskipTests=true -Dstyle.color=always -Djansi.force=true --no-transfer-progress --file pom.xml
      run: mvn $MVN-OPTIONS

    - uses: actions/upload-artifact@v4
      with:
        name: jars
        path: registry/target/quarkus-app/**/*.jar

  image-build:

    runs-on: ubuntu-latest
    needs:
      - maven-build

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            pom.xml
            registry/pom.xml
            registry/src/main/docker/Dockerfile.jvm
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v4
        with:
          name: jars
          path: registry/target/quarkus-app
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - run: sudo apt-get -y install podman
      - name: Build image with podman
        run: |
          echo "${{vars.DOCKERHUB_USERNAME}}"
          mvn install \
            -DskipTests=true \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=true \
            -Dquarkus.container-image.username=${{vars.DOCKERHUB_USERNAME}} \
            -Dquarkus.container-image.password=${{secrets.DOCKERHUB_PASSWORD}} \
            -Dquarkus.container-image.group=wvandenberghe \
            -Dquarkus.container-image.name=dockerregistry \
            -Dquarkus.container-image.tag=1.0.0-SNAPSHOT \
            -Dstyle.color=always \
            -Djansi.force=true \
            --no-transfer-progress

  image-scan:

    runs-on: ubuntu-latest
    needs:
      - image-build

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/wvandenberghe/dockerregistry:1.0.0-SNAPSHOT'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: ${{ env.TRIVY_SEVERITY }}

  cleanup-image:
    runs-on: ubuntu-latest
    needs:
      - image-scan

    if: failure()

    steps:
      - name: Remove image
        run: |
          TOKEN=`curl -s -H "Content-Type: application/json" -X POST -H "Content-Type: application/json" -d '{"username":"${{vars.DOCKERHUB_USERNAME}}", "password":"${{secrets.DOCKERHUB_PASSWORD}}"}' "https://hub.docker.com/v2/users/login/" | jq -r .token`
          curl "https://hub.docker.com/v2/repositories/wvandenberghe/dockerregistry/tags/1.0.0-SNAPSHOT/" -X DELETE -H "Authorization: JWT ${TOKEN}"

  tag-latest:
    runs-on: ubuntu-latest
    needs:
      - image-scan

    if: success()

    steps:
      - run: sudo apt-get -y install skopeo
      - run: |
          skopeo copy --src-username ${{vars.DOCKERHUB_USERNAME}} --src-password ${{secrets.DOCKERHUB_PASSWORD}} --dest-username ${{vars.DOCKERHUB_USERNAME}} --dest-password ${{secrets.DOCKERHUB_PASSWORD}} docker://wvandenberghe/dockerregistry:1.0.0-SNAPSHOT docker://wvandenberghe/dockerregistry:latest

  upload-image-artifacts:
    runs-on: ubuntu-latest
    needs:
      - tag-latest

    steps:
      - run: sudo apt-get -y install skopeo
      - run: |
          skopeo copy --src-username ${{vars.DOCKERHUB_USERNAME}} --src-password ${{secrets.DOCKERHUB_PASSWORD}} docker://wvandenberghe/dockerregistry:1.0.0-SNAPSHOT docker-archive:dockerregistry-1.0.0-SNAPSHOT.tar:wvandenberghe/dockerregistry:1.0.0-SNAPSHOT
          skopeo copy --src-username ${{vars.DOCKERHUB_USERNAME}} --src-password ${{secrets.DOCKERHUB_PASSWORD}} docker://wvandenberghe/dockerregistry:latest docker-archive:dockerregistry-latest.tar:wvandenberghe/dockerregistry:latest
      - uses: actions/upload-artifact@v4
        with:
          name: images
          path: ./**/*.tar